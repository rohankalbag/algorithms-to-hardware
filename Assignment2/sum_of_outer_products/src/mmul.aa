$parameter ORDER 16


$storage A B C: $array[ORDER][ORDER] $of $uint<32>

$module [storeA] $in (I J: $uint<8> wval: $uint<32>) $out () $is
{
	A[I][J] := wval
}
$module [storeB] $in (I J: $uint<8> wval: $uint<32>) $out () $is
{
	B[I][J] := wval
}

$module [loadC] $in (I J : $uint<8>) $out (Y : $uint<32>) $is
{
	Y := C[I][J]
}


$module [mmul] $in () $out () $is
{
	$branchblock[loop] {
		$merge $entry K_loopback
			$phi K := $zero<8> $on $entry nK $on K_loopback
		$endmerge

			$merge $entry I_loopback 
				$phi I := $zero<8> $on $entry nI $on I_loopback
			$endmerge

				$dopipeline $depth 31 $buffering 4 
				$fullrate 
				
				$merge $entry $loopback 
					$phi J := $zero<8> $on $entry nJ $on $loopback
				$endmerge
				$volatile nJ := (J + 1)
				$volatile Jcontinue_flag := (J < (ORDER - 1))
				$volatile prev_C := C[I][J]
				
				C[I][J] := (prev_C + (A[I][K] * B[K][J]))
		
				$while Jcontinue_flag

			$volatile nI := (I + 1)
			$volatile Icontinue_flag := (I < (ORDER - 1))
			
			$if Icontinue_flag $then $place [I_loopback] $endif
		
		$volatile nK := (K + 1)
		$volatile Kcontinue_flag := (K < (ORDER - 1))
	
		$if Kcontinue_flag $then $place [K_loopback] $endif
	}
}

