$parameter ORDER 16

//
// observation signals to keep track of progress.
//
$pipe mmul_I : $uint<8> $signal
$pipe mmul_J : $uint<8> $signal
$pipe mmul_START: $uint<8> $signal
$pipe mmul_END: $uint<8> $signal

$storage A B C: $array[ORDER][ORDER] $of $uint<32>

$module [storeA] $in (I J: $uint<8> wval: $uint<32>) $out () $is
{
	A[I][J] := wval
}
$module [storeB] $in (I J: $uint<8> wval: $uint<32>) $out () $is
{
	B[I][J] := wval
}

$module [loadC] $in (I J : $uint<8>) $out (Y : $uint<32>) $is
{
	Y := C[I][J]
}


$module [dot_product] $in (I J: $uint<8>) $out (result: $uint<32>) $is
{
	$branchblock[loop] {

		$dopipeline $depth 31 $fullrate
			$merge $entry $loopback
				$phi K := $zero<8> $on $entry nK $on $loopback
				$phi SUM0 := ($bitcast ($uint<32>) 0)  $on $entry nSUM0 $on $loopback
				$phi SUM1 := ($bitcast ($uint<32>) 0)  $on $entry nSUM1 $on $loopback
				$phi SUM2 := ($bitcast ($uint<32>) 0)  $on $entry nSUM2 $on $loopback
				$phi SUM3 := ($bitcast ($uint<32>) 0)  $on $entry nSUM3 $on $loopback
				$phi SUM4 := ($bitcast ($uint<32>) 0)  $on $entry nSUM4 $on $loopback
				$phi SUM5 := ($bitcast ($uint<32>) 0)  $on $entry nSUM5 $on $loopback
				$phi SUM6 := ($bitcast ($uint<32>) 0)  $on $entry nSUM6 $on $loopback
				$phi SUM7 := ($bitcast ($uint<32>) 0)  $on $entry nSUM7 $on $loopback
			$endmerge

			$volatile nK := (K + 8)
			$volatile K1 := (K + 1)
			$volatile K2 := (K + 2)
			$volatile K3 := (K + 3)
			$volatile K4 := (K + 4)
			$volatile K5 := (K + 5)
			$volatile K6 := (K + 6)
			$volatile K7 := (K + 7)
			
			$volatile continue_flag := (K < (ORDER-8))

			nSUM0 := (SUM0 + (A[I][K] * B[K][J]))
			nSUM1 := (SUM1 + (A[I][K1] * B[K1][J]))
			nSUM2 := (SUM2 + (A[I][K2] * B[K2][J]))
			nSUM3 := (SUM3 + (A[I][K3] * B[K3][J]))
			nSUM4 := (SUM4 + (A[I][K4] * B[K4][J]))
			nSUM5 := (SUM5 + (A[I][K5] * B[K5][J]))
			nSUM6 := (SUM6 + (A[I][K6] * B[K6][J]))
			nSUM7 := (SUM7 + (A[I][K7] * B[K7][J]))

		$while continue_flag
	} (nSUM0 => R0 nSUM1 => R1 nSUM2 => R2 nSUM3 => R3 nSUM4 => R4 nSUM5 => R5 nSUM6 => R6 nSUM7 => R7)
	$volatile result := (((R0 + R1) + (R2 + R3)) + ((R4 + R5) + (R6 + R7)))
}

$module [mmul] $in () $out () $is
{
	mmul_START := 1
	$branchblock[loop] {
	    u := mmul_START v := mmul_END // for logging 
	    $merge $entry I_loopback 
			$phi I := $zero<8> $on $entry nI $on I_loopback
		$endmerge
		$volatile nI := (I + 1)

		$dopipeline $depth 3 
			$merge $entry $loopback 
				$phi J := $zero<8> $on $entry nJ $on $loopback
			$endmerge
			$volatile nJ := (J + 1)
			$volatile continue_flag := (J < (ORDER - 1))
	
			// dot-product!
			C[I][J] := ($call dot_product (I J))
	
			mmul_I := I
			mmul_J := J
			
		$while continue_flag

	    $if (I < (ORDER-1)) $then $place [I_loopback] $endif
	}
	mmul_END := 1
}

