	Using the Aa pre-processor
		Madhav Desai


1. Overview
----------------------------

	The Aa pre-processor allows us
	to construct code by a combination
	of the following operations
		- #define
		- file-inclusion (#include)
		- conditional inclusion (#if #endif)
		- string pasting ##


1. Defines
-----------

	Using #define, we can assign values
	to strings.  For example

	#define USE_FOO 1

	means that USE_FOO will be evaluated
	as 1.

1. File inclusion
-------------------

	The following directive is
	used

	#include <file-name>

	where the file-name is that
	of a file that is to be included.

	The file is searched for in 
	the specified search directories
	for the pre-processor.


2. Conditional inclusion
-------------------------------

	The #if directive is used

	#if USE_FOO
		foo 
	#endif
	... code .....

	The USE_FOO string must be
	defined.  If the evaluation of USE_FOO
	is non-zero, then the pre-processor
	produces

		foo
	... code .....

	If the evaluation  of USE_FOO is 0,	
	the pre-processor produces

	... code .....


3. Pasting
---------------------


	If we have defined  something, e.g.

	#define CPU_ID 3

	Then we can insert "3" wherever we
	want by pasting CPU_ID


	memory_access_pipe_##CPU_ID

	The pre-processor will produce

	memory_access_pipe_3


4.  Quirks
-----------------

	You can combine #if and #define

	#if USE_FOO
	#define USE_FOO_AGAIN 1
	#endif

	You can combine #if and #include

	#if USE_FOO
	#include foo_logic.aa
	#endif

	There is no #else


5. The AaPreprocess command
-------------------------------
 
	AaPreprocess [-I <include-directory>]*  <filename> (<filename>) ... 

	Options
    		-I <include-directory> : add include directory to search path.
    		-o <output-file-name>  : output file

	e.g.
	AaPreprocess -I src/ src/toplevel.aa -o preprocessed.aa  

	To format the pre-processor output, you could use

	vcFormat < preprocessed.aa > preprocessed.formatted.aa 	

6. Example
---------------------

	In the src/ directory, you will find 3 files
	
	base.aa
		contains a fragment of code (a branchblock)
		which will be used to generate multiple branch
		blocks with different values for ID.

	decls.aa
		two pipe declarations which will be used to
		generate multiple declarations of pipes with
		different values for ID.

	toplevel.aa

		A top-level file which is used to generate
		the final code.  There is a module called myTop,
		in which there is a parallel block.  Inside
		the parallel block, there are two inclusions
		of base.aa preceded by definitions of ID.


	In the current directory, there is a shell script called
	compile.sh which calls the AaPreprocess utility.

	Run this script and look at the file preprocessed.aa
	to see what was generated.
