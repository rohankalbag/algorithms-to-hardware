$storage A B: $array[256] $of $float<8,23>

$module [storeA] $in (addr: $uint<8> wval: $float<8,23>) $out () $is
{
	A[addr] := wval
}
$module [storeB] $in (addr: $uint<8> wval: $float<8,23>) $out () $is
{
	B[addr] := wval
}

$module [dot_product] $in (order: $uint<8>) $out (result: $float<8,23>) $is
{
	$branchblock[loop] {

		$dopipeline $depth 31 $fullrate
			$merge $entry $loopback
				$phi I := $zero<8> $on $entry nI $on $loopback
				$phi SUM := ($bitcast ($float<8,23>) 0)  $on $entry nSUM $on $loopback
			$endmerge
			$volatile nI := (I + 1)
			$volatile continue_flag := (I < (order-1))

			nSUM := (SUM + (A[I] * B[I]))

		$while continue_flag
	} (nSUM => result_exported)
	$volatile result := result_exported
}


